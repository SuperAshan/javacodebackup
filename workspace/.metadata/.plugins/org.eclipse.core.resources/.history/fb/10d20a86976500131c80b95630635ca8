import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import java.util.TreeSet;

import Config.Conf;
import PositionProcess.StressMajorization.Floyd;
import Statistic.NetWorkMeasurement;
import Tool.AdjacementMatrix;
import Tool.DbToNodeRelation;
import Tool.WeightAdjacementMatrix;

/**
 * @author weitao
 * 
 */
public class NetWorkMeasurementTest
{

	/**
	 * @param args
	 *            暂时没有参数
	 * @throws IOException
	 */
	public static void main(String[] args) throws IOException
	{
//		int[][] tes=new int[4][];
//		tes[0]=new int[]{0,1,1,0};
//		tes[1]=new int[]{1,0,1,1};
//		tes[2]=new int[]{1,1,0,1};
//		tes[3]=new int[]{0,1,1,0};
//		for(int i=0;i<4;i++)
//		{
//			for(int j=0;j<4;j++)
//			{
//				if(tes[i][j]==0)
//					tes[i][j]=100;
//			}
//		}
//		int[][] dij=Floyd.getShortedPath(tes);
//		double str=1.222E-4;
//		BigDecimal doubleBigDecimal1 = new BigDecimal(str);
 
		// TODO Auto-generated method stub
		int nodenumber=500000;
//		DbToNodeRelation dbToNodeRelation = new DbToNodeRelation(
//				"HaidianUsersNew", nodenumber);
//		dbToNodeRelation.Initialize();
//		dbToNodeRelation.DataProcessConnectedInternet();
	//	AdjacementHaidianFileConnectedHaidianUsersNew5000
//		String filePathAndName=Conf.GetDataDir()+"/NetWorkMeasurement/AdjacementHaidianFileConnectedHaidianUsersNew"+Integer.toString(nodenumber)+".txt";
//		String filePathAndName = Conf.GetDataDir()
//				+ "\\NetWorkMeasurement\\AdjacementHaidianFileConnectedHaidianUsersNew1000.txt";
		HashMap<Integer, TreeSet<Integer>> edgeMap = new HashMap<Integer, TreeSet<Integer>>();
//		String UserDegreeFilePath=Conf.GetDataDir()+"\\NetWorkMeasurement\\UserDegreeFileConnected"+Integer.toString(nodenumber)+".txt";
//			File UserDegreeFile = new File(UserDegreeFilePath);   
//	        if (!UserDegreeFile.exists()) {   
//	        	UserDegreeFile.createNewFile();   
//	        }   
//	        OutputStreamWriter UserDegreewrite = new OutputStreamWriter(new FileOutputStream(UserDegreeFile),"GB2312");   
//	        BufferedWriter UserDegreewriter=new BufferedWriter(UserDegreewrite);
//		int nodenumber=0;
//		int nodeindex=0;
//	    int userindex=0;
//		try
//		{
//			File f = new File(filePathAndName);
//			if (f.isFile() && f.exists())
//			{
//				InputStreamReader read = new InputStreamReader(
//						new FileInputStream(f), "UTF-8");
//				BufferedReader reader = new BufferedReader(read);
//				String line;
//				int guli=0;
//
//				while ((line = reader.readLine()) != null)
//				{
//					nodeindex++;
////					nodenumber++;
//					userindex++;
//					String[] item = line.split(":");
//					if (item.length != 2)
//					{
//						guli++;
//						continue;
//					} else
//					{
//						String[] neibornumber = item[1].split(" ");
//						int length = neibornumber.length;
//						if (length != 0)
//						{
//							TreeSet<Integer> treeSet = new TreeSet<Integer>();
//							for (int i = 0; i < length; i++)
//							{
//								treeSet.add(Integer.parseInt(neibornumber[i]));
//							}
//							edgeMap.put(Integer.parseInt(item[0]), treeSet);
////							UserDegreewriter.write(Integer.toString(userindex)+" "+Integer.toString(treeSet.size()));
////							UserDegreewriter.append("\n");
////							UserDegreewriter.flush();
//							
//  
//						}
//					}
//
//				}
////				UserDegreewriter.close();
//				System.out.println("孤立点："+guli);
//				read.close();
//			}
//		} catch (Exception e)
//		{
//			System.out.println("读取文件内容操作出错");
//			e.printStackTrace();
//		}
		AdjacementMatrix nodeMatrix=new AdjacementMatrix(edgeMap, nodenumber);
//		Set keyset=edgeMap.keySet();
//		Iterator it1=keyset.iterator();
//		while(it1.hasNext())
//		{
//			int key=(Integer)it1.next();
//			int value=0;
//			if(edgeMap.get(key).size()==1)
//		   {
//				TreeSet set=edgeMap.get(key);
//				Iterator it2=set.iterator();
//				value=(Integer)it2.next();
//				if(edgeMap.get(value).size()==1)
//				{
//					System.out.println("("+Integer.toString(key)+","+Integer.toString(value)+")");
//				}
//				
//				
//		   }
//		}
//		int n=edgeMap.size();
//		for(int i=0;i<n;i++)
//		{
//			
//		}
	//	AdjacementMatrix nodeMatrix=new AdjacementMatrix();
		NetWorkMeasurement nt=new NetWorkMeasurement(nodeMatrix,nodenumber);
		nt.InitializeProcess();
		nt.getstatic();
		nt.getDegreeX();
		nt.makeDegreeMatrix();
		nt.getPtscoefficient();
		nt.getMixingMatrix();

//		WeightAdjacementMatrix matrix=new WeightAdjacementMatrix(nodeMatrix, nodenumber)
	//	nodeMatrix.
		
		

	}

}